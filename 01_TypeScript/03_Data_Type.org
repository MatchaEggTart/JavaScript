* Data Type

There are 8 Basic Data Types in JavaScript


** Number

*** WHAT

The number type repensents(代表) both integer and floating point number

We’ll see more about working with numbers in the chapter [[https://javascript.info/number][Numbers]].

*** HOW

#+begin_src js
  let a: number;
  let b: number = 2;
  a = NaN;
  console.log("Value:\n");
  console.log("a = " + a + "\nb = " + b);
  console.log("\nTypeof:\n");
  console.log("typeof(a) = " + typeof(a) + "\ntypeof(b) = " + typeof(b))
#+end_src

*** ATTENTION

Besides(除了) regular numbers, 3 special numberic values also belong to Number Type:

1) Infinity
   
   Infinity represents the mathematical Infinity ∞
   1 / 0 => Infinity
   It is a special value that’s greater than any number
   
2) -Infinity

   -Infinity represents the mathematical negative infinity -∞
   Infinity * -1 => -Infinity
   It is a special value that's less than any number
   
3) NaN

   NaN represents a computational error
   It's a result of an incorrect or an underfined mathematical operation
   NaN is sticky. Any further mathematical operation on NaN returns NaN
   #+begin_src js
     alert(NaN + 1); // NaN
     alert("not a number" / 2 - 1); //NaN
   #+end_src
   
   only one exception: NaN ** 0 => 1
   
   

** String
*** WHAT

A string in JS must be surround by quotes

there are 3 types of quotes:

1) Double quotes

   #+begin_src js
     let str1 = "Hello";
   #+end_src
   
2) Single quotes

   #+begin_src js
     let str2 = 'World';  // same as Double quotes
   #+end_src
   
3) Backticks

   #+begin_src js
     let phrase = `can embed another ${str}`;
   #+end_src

   Backticks are "extended functionality" quotes
   They allow us to embed variables and expressions into a string by wrapping them in ${...}
   e.g:
   
   #+begin_src js
     let name = "John";

     // embed a variable
     alert(`Hello, ${name}!`);

     // embed a expression
     alert(`the result is ${1 + 2}`); // => 3
   #+end_src

   The expression inside `${}` is evaluated and the result becomes a part of string

   We’ll cover strings more thoroughly in the chapter [[https://javascript.info/string][Strings]].

*** ATTENTION
In some languages, there is a special “character” type for a single character
For example, in the C language and in Java it is called “char”

In JavaScript, there is no such type
There’s only one type: string
A string may consist of zero characters (be empty), one character or many of them


** Bigint

*** WHAT

In JavaScript,
the “number” type cannot safely represent integer values larger than (253-1) (that’s 9007199254740991),
or less than -(253-1) for negatives.

To be really precise,
the “number” type can store larger integers (up to 1.7976931348623157 * 10308),
but outside of the safe integer range ±(253-1) there’ll be a precision error,
because not all digits fit into the fixed 64-bit storage.
So an “approximate” value may be stored.

For example, these two numbers (right above the safe range) are the same:

#+begin_src js
  console.log(9007199254740991 + 1); // 9007199254740992
  console.log(9007199254740991 + 2); // 9007199254740992
#+end_src

So to say, all odd integers greater than (253-1) can’t be stored at all in the “number” type.

For most purposes ±(253-1) range is quite enough,
but sometimes we need the entire range of really big integers,
e.g. for cryptography or microsecond-precision timestamps.

BigInt type was recently added to the language to represent integers of arbitrary length.

A BigInt value is created by appending n to the end of an integer:

#+begin_src js
  // the "n" at the end means it's a BigInt
  const bigInt = 1234567890123456789012345678901234567890n;
#+end_src

As BigInt numbers are rarely needed, we don’t cover them here,
but devoted them a separate chapter [[https://javascript.info/bigint][BigInt]]. Read it when you need such big numbers.

*** ATTENTION

Right now, BigInt is supported in Firefox/Chrome/Edge/Safari, but not in IE.


** Boolean
*** WHAT

Basic Data Types



** Undefined

*** WHAT

Basic Data Types


** Null

*** WHAT

Basic Data Types


** Symbol

*** WHAT

Basic Data Types


** Object

*** WHAT

Basic Data Types

** 

