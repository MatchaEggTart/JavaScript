* Data Type

There are 8 Basic Data Types in JavaScript


** Number

*** WHAT

The number type repensents(代表) both integer and floating point number

We’ll see more about working with numbers in the chapter [[https://javascript.info/number][Numbers]].

*** HOW

#+begin_src js
  let a: number;
  let b: number = 2;
  a = NaN;
  console.log("Value:\n");
  console.log("a = " + a + "\nb = " + b);
  console.log("\nTypeof:\n");
  console.log("typeof(a) = " + typeof(a) + "\ntypeof(b) = " + typeof(b))
#+end_src

*** ATTENTION

Besides(除了) regular numbers, 3 special numberic values also belong to Number Type:

1) Infinity
   
   Infinity represents the mathematical Infinity ∞
   1 / 0 => Infinity
   It is a special value that’s greater than any number
   
2) -Infinity

   -Infinity represents the mathematical negative infinity -∞
   Infinity * -1 => -Infinity
   It is a special value that's less than any number
   
3) NaN

   NaN represents a computational error
   It's a result of an incorrect or an underfined mathematical operation
   NaN is sticky. Any further mathematical operation on NaN returns NaN
   #+begin_src js
     alert(NaN + 1); // NaN
     alert("not a number" / 2 - 1); //NaN
   #+end_src
   
   only one exception: NaN ** 0 => 1
   
   

** String

*** WHAT

A string in JS must be surround by quotes

there are 3 types of quotes:

1) Double quotes

   #+begin_src js
     let str1 = "Hello";
   #+end_src
   
2) Single quotes

   #+begin_src js
     let str2 = 'World';  // same as Double quotes
   #+end_src
   
3) Backticks

   #+begin_src js
     let phrase = `can embed another ${str}`;
   #+end_src

   Backticks are "extended functionality" quotes
   They allow us to embed variables and expressions into a string by wrapping them in ${...}
   e.g:
   
   #+begin_src js
     let name = "John";

     // embed a variable
     alert(`Hello, ${name}!`);

     // embed a expression
     alert(`the result is ${1 + 2}`); // => 3
   #+end_src

   The expression inside `${}` is evaluated and the result becomes a part of string

   We’ll cover strings more thoroughly in the chapter [[https://javascript.info/string][Strings]].

*** ATTENTION

In some languages, there is a special “character” type for a single character
For example, in the C language and in Java it is called “char”

In JavaScript, there is no such type
There’s only one type: string
A string may consist of zero characters (be empty), one character or many of them


** Bigint

*** WHAT

In JavaScript,
the “number” type cannot safely represent integer values larger than (253-1) (that’s 9007199254740991),
or less than -(253-1) for negatives.

To be really precise,
the “number” type can store larger integers (up to 1.7976931348623157 * 10308),
but outside of the safe integer range ±(253-1) there’ll be a precision error,
because not all digits fit into the fixed 64-bit storage.
So an “approximate” value may be stored.

For example, these two numbers (right above the safe range) are the same:

#+begin_src js
  console.log(9007199254740991 + 1); // 9007199254740992
  console.log(9007199254740991 + 2); // 9007199254740992
#+end_src

So to say, all odd integers greater than (253-1) can’t be stored at all in the “number” type.

For most purposes ±(253-1) range is quite enough,
but sometimes we need the entire range of really big integers,
e.g. for cryptography or microsecond-precision timestamps.

BigInt type was recently added to the language to represent integers of arbitrary length.

A BigInt value is created by appending n to the end of an integer:

#+begin_src js
  // the "n" at the end means it's a BigInt
  const bigInt = 1234567890123456789012345678901234567890n;
#+end_src

As BigInt numbers are rarely needed, we don’t cover them here,
but devoted them a separate chapter [[https://javascript.info/bigint][BigInt]]. Read it when you need such big numbers.

*** ATTENTION

Right now, BigInt is supported in Firefox/Chrome/Edge/Safari, but not in IE.


** Boolean

*** WHAT

logical type
The boolean has only two types : True and False
This type is commonly used to store two values yes/no: True means "yes, correct", False means "no, incorrect"

For instance:

#+begin_src js
  let nameFieldChecked = true; // name field is checked
  let ageFieldChecked = false; // age Field is not checked
#+end_src

Boolean values also come as a result of comparisons:

#+begin_src js
  let isGreater = 4 > 1;
  alert(isGreater); // true, the comparison result is yes
#+end_src

We’ll cover booleans more deeply in the chapter [[https://javascript.info/logical-operators][Logical operators]].


** Null

*** WHAT

The "Null" value doesn't belong to any types desicribed above
It forms a separate type of its own which contains only the null value:

#+begin_src js
  let age = null;
#+end_src

In Js, null is not a "reference(引用) to a non-existing object" or a "null pointer" like in some other languages
It's just a special value which represents "nothing", "empty" or "value unknow"

the code above states that age is unknown


** Undefined

*** WHAT

The special value "undefined" also stands apart(独自，自成一体)
It makes a type of its own, just like Null

The meaning of undefined is "value is no assigned(指定，指派)"

If a variable is declared(被声明), but not assigned, then the value is undifined:

#+begin_src js
  let age;
  alert(age); // shows "undefined"
#+end_src

Tehnically(技术上), it is possible to explicitly assign undefined to a variable:

#+begin_src js
  let age = 100;

  age = undefined;

  alert(age);
#+end_src

But we don’t recommend doing that
Normally, one uses null to assign an “empty” or “unknown” value to a variable
while undefined is reserved(保留，留作，推迟决定) as a default initial value for unassigned things

*** ATTENTION

When u use the operator "==", the null value is same as the undefined value
But u use the operator "=====", the null value isn't same as the undefined value

#+begin_src js
  let myVar;
  console.log("\"myVar == null\":\t" + (myVar == null));    // True
  console.log("\"myVar === null\":\t" + (myVar === null));  // False
#+end_src


** Symbol

*** WHAT


** Object and Symbols

*** WHAT

The object type is special

All other types are called “primitive(原始的)” because their values can contain only a single thing (be it a string or a number or whatever)
In contrast(相反), objects are used to store collections of data and more complex entities

Being that important, objects deserve a special treatment(对待)
We’ll deal with them later in the chapter [[https://javascript.info/object][Object]], after we learn more about primitives

The symbol type is used to create unique identifiers for objects
We have to mention(提及) it here for the sake(为了、好处) of completeness(完整性),
but also postpone(推迟) the details(细节) till we know objects


** The typeof operator

*** WHAT

The typeof operator returns the type of the operand(运算对象)
It’s useful when we want to process(步骤；处理) values of different types differently or just want to do a quick check

A call to typeof x returns a string with the type name:

#+begin_src js
  typeof undefined // "undefined"

  typeof 0 // "number"

  typeof 10n // "bigint"

  typeof true // "boolean"

  typeof "foo" // "string"

  typeof Symbol("id") // "symbol"

  typeof Math // "object"  (1)

  typeof null // "object"  (2)

  typeof alert // "function"  (3)
#+end_src

The last three lines may need additional explanation:

1) Math is a built-in(内建) object that provides mathematical operations
   We will learn it in the chapter [[https://javascript.info/number][Numbers]]. Here, it serves just as an example of an object
   
2) The result of typeof null is "object"
   That’s an officially recognized(公认) error in typeof, coming from very early days of JavaScript and kept for compatibility(兼容性)
   Definitely(明确的), null is not an object
   It is a special value with a separate type of its own. The behavior(行为) of typeof is wrong here
   
3) The result of typeof alert is "function", because alert is a function
   We’ll study functions in the next chapters where we’ll also see that there’s no special “function” type in JavaScript
   Functions belong to the object type
   But typeof treats(处理) them differently, returning "function"
   That also comes from the early days of JavaScript
   Technically, such behavior isn’t correct, but can be convenient(方便) in practice

*** ATTENTION

**** The typeof(x) syntax

You may also come across another syntax: typeof(x). It’s the same as typeof x

To put it clear: typeof is an operator, not a function. The parentheses(圆括号) here aren’t a part of typeof
It’s the kind of parentheses used for mathematical grouping

Usually, such parentheses contain a mathematical expression, such as (2 + 2), but here they contain only one argument (x)
Syntactically(从语法上讲), they allow to avoid(避免；回避) a space between the typeof operator and its argument, and some people like it

Some people prefer typeof(x), although the typeof x syntax is much more common


** Summary

There are 8 basic data types in JavaScript.

*** Seven primitive data types:

**** Number

number for numbers of any kind: integer or floating-point, integers are limited by ±(253-1)

**** BigInt

bigint for integer numbers of arbitrary length

**** String

string for strings. A string may have zero or more characters, there’s no separate single-character type

**** Boolean

boolean for true/false

**** Null

null for unknown values – a standalone type that has a single value null

**** Undefined

undefined for unassigned values – a standalone type that has a single value undefined

**** Symbol

symbol for unique identifiers
   

*** And one non-primitive data type:

**** Object

object for more complex data structures.
   

*** The typeof operator allows us to see which type is stored in a variable.

Usually used as typeof x, but typeof(x) is also possible

Returns a string with the name of the type, like "string"

For null returns "object" – this is an error in the language, it’s not actually an object
